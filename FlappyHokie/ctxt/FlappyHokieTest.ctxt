#BlueJ class context
comment0.params=
comment0.target=FlappyHokieTest()
comment0.text=\r\n\ Creates\ a\ new\ FlappyHokieTest\ test\ object.\r\n
comment1.params=
comment1.target=void\ setUp()
comment1.text=\r\n\ Sets\ up\ the\ test\ fixture.\r\n\ Called\ before\ every\ test\ case\ method.\r\n
comment10.params=
comment10.target=void\ testGetAndSetVertical()
comment10.text=\r\n\ Tests\ the\ getVertical()\ method.\ It\ should\ return\ vertical.\r\n\ Also\ tests\ the\ setVertical()\ method.\ It\ sets\ a\ new\ value\r\n\ for\ vertical.\r\n
comment11.params=
comment11.target=void\ testGetAndSetPoints()
comment11.text=\r\n\ Tests\ the\ getPoints()\ method.\ It\ should\ return\ points.\ Also\r\n\ tests\ the\ setPoints()\ method.\ It\ sets\ a\ new\ value\ for\ points.\r\n
comment12.params=
comment12.target=void\ testFlap1()
comment12.text=\r\n\ Tests\ the\ flap()\ method.\ If\ j\ is\ greater\ than\ zero,\ then\ \r\n\ the\ bird\ should\ flap\ up\ 5\ cells\ for\ as\ many\ times\ as\ given\r\n\ in\ the\ parameter.\r\n
comment13.params=
comment13.target=void\ testFlap2()
comment13.text=\r\n\ Tests\ the\ flap()\ method.\ If\ j\ is\ less\ than\ zero,\ then\ \r\n\ the\ bird\ should\ flap\ down\ 1\ cell\ for\ as\ many\ times\ as\ given\r\n\ in\ the\ parameter.\r\n
comment14.params=
comment14.target=void\ testReset()
comment14.text=\r\n\ Tests\ the\ reset()\ method.\ The\ world\ that\ the\ bird\ is\ in\r\n\ should\ remove\ the\ scoreboard\ and\ pipes,\ update\ them,\ and\r\n\ then\ place\ them\ back\ into\ the\ word.\r\n
comment15.params=
comment15.target=void\ testWrapAround1()
comment15.text=\r\n\ Tests\ the\ wrapAround()\ method.\ If\ points\ is\ equal\ to\ zero,\r\n\ then\ points\ should\ be\ set\ to\ five\ and\ the\ world\ should\ be\r\n\ reset.\r\n
comment16.params=
comment16.target=void\ testWrapAround2()
comment16.text=\r\n\ Tests\ the\ wrapAround()\ method.\ If\ points\ is\ not\ equal\ to\r\n\ zero,\ then\ points\ should\ double\r\n
comment2.params=
comment2.target=void\ testAct1()
comment2.text=\r\n\ Tests\ the\ act()\ method.\ The\ FlappyHokie\ should\ call\ the\r\n\ lose()\ method\ from\ FlappyWorld\ and\ remove\ itself\ from\ the\r\n\ world\ if\ it\ hits\ a\ pipe.\r\n
comment3.params=
comment3.target=void\ testAct2()
comment3.text=\r\n\ Tests\ the\ act()\ method.\ The\ FlappyHokie\ should\ call\ the\r\n\ lose()\ method\ from\ FlappyWorld\ and\ remove\ itself\ from\ the\r\n\ world\ if\ it\ touches\ the\ top\ edge\ of\ the\ world.\r\n
comment4.params=
comment4.target=void\ testAct3()
comment4.text=\r\n\ Tests\ the\ act()\ method.\ The\ FlappyHokie\ should\ call\ the\r\n\ lose()\ method\ from\ FlappyWorld\ and\ remove\ itself\ from\ the\r\n\ world\ if\ it\ touches\ the\ bottom\ edge\ of\ the\ world.\r\n
comment5.params=
comment5.target=void\ testAct4()
comment5.text=\r\n\ Tests\ the\ act()\ method.\ The\ FlappyHokie\ should\ just\ wrap\r\n\ around\ and\ fall\ if\ it\ is\ not\ touching\ a\ pipe\ or\ the\ top\r\n\ or\ bottom\ edge\ of\ the\ world.\r\n
comment6.params=
comment6.target=void\ testAct5()
comment6.text=\r\n\ Tests\ the\ act()\ method.\ If\ isFlapping\ is\ true,\ then\ add\r\n\ flapping\ to\ speed\ and\ reset\ isFlapping.\ Also,\ if\ speed\r\n\ is\ greater\ than\ 4,\ set\ speed\ equal\ to\ 4.\r\n
comment7.params=
comment7.target=void\ testAct6()
comment7.text=\r\n\ Tests\ the\ act()\ method.\ If\ speed\ is\ less\ than\ -6,\ then\ set\r\n\ the\ speed\ equal\ to\ -6.\r\n
comment8.params=
comment8.target=void\ testGetAndSetSpeed()
comment8.text=\r\n\ Tests\ the\ getSpeed()\ method.\ It\ should\ return\ speed.\ Also\r\n\ tests\ the\ setSpeed()\ method.\ It\ sets\ a\ new\ value\ for\ speed.\r\n
comment9.params=
comment9.target=void\ testGetAndSetFlapping()
comment9.text=\r\n\ Tests\ the\ getFlapping()\ method.\ It\ should\ return\ the\ value\r\n\ of\ isFlapping.\ Also\ tests\ the\ setFlapping()\ method.\ It\r\n\ sets\ a\ new\ value\ for\ isFlapping.\r\n
numComments=17
